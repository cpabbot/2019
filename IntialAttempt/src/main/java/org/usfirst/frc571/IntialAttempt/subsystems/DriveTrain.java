// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc571.IntialAttempt.subsystems;


import org.usfirst.frc571.IntialAttempt.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private PIDController turnController;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftFrontDrive;
    private WPI_TalonSRX leftRearDrive;
    private SpeedControllerGroup leftDrive;
    private WPI_TalonSRX rightFrontDrive;
    private WPI_TalonSRX rightRearDrive;
    private SpeedControllerGroup rightDrive;
    private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    double rotateToAngleRate;

    static final double kP = 0.10;
	static final double kI = 0.00;
	static final double kD = 0.15;
	static final double kF = 0.00;

    static final double kToleranceDegrees = 2.0f;
    

    public DriveTrain() {
        leftFrontDrive = new WPI_TalonSRX(1);
        rightFrontDrive = new WPI_TalonSRX(3);
        /*
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFrontDrive = new WPI_TalonSRX(1);
        
        
        
        leftRearDrive = new WPI_TalonSRX(2);
        
        
        
        leftDrive = new SpeedControllerGroup(leftFrontDrive, leftRearDrive  );
        addChild("LeftDrive",leftDrive);
        
        
        rightFrontDrive = new WPI_TalonSRX(3);
        
        
        
        rightRearDrive = new WPI_TalonSRX(4);
        
        
        
        rightDrive = new SpeedControllerGroup(rightFrontDrive, rightRearDrive  );
        addChild("RightDrive",rightDrive);
        
        
        differentialDrive = new DifferentialDrive(leftDrive, rightDrive);
        addChild("DifferentialDrive",differentialDrive);
        differentialDrive.setSafetyEnabled(false);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        */
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new RKDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        Shuffleboard.getTab("Subsystems").add("ahrs/kP", kP);
		Shuffleboard.getTab("Subsystem").add("ahrs/kI", kI);
        Shuffleboard.getTab("Subsystem").add("ahrs/kD", kD);
        Shuffleboard.getTab("Subsystem").add("ahrs/kF", kF);
    }

    public void arcadeDrive(double speed, double rotation) {
    	differentialDrive.arcadeDrive(speed, rotation);
    }

    public void turnTo(double angle) {
		double currentRotationRate;
		turnController.setP(SmartDashboard.getNumber("ahrs/kP", kP));
		turnController.setI(SmartDashboard.getNumber("ahrs/kI", kI));
		turnController.setD(SmartDashboard.getNumber("ahrs/kD", kD));
		turnController.setF(SmartDashboard.getNumber("ahrs/kF", kF));
		turnController.setSetpoint(angle);
		turnController.enable();
		currentRotationRate = rotateToAngleRate;
		robotDrive.arcadeDrive(0, currentRotationRate);
	}


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


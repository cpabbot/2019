// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc571.IntialAttempt.subsystems;


import org.usfirst.frc571.IntialAttempt.Robot;
import org.usfirst.frc571.IntialAttempt.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInLayouts;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardLayout;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem implements PIDOutput {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private PIDController turnController;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftFrontDrive;
    private WPI_TalonSRX leftRearDrive;
    private SpeedControllerGroup leftDrive;
    private WPI_TalonSRX rightFrontDrive;
    private WPI_TalonSRX rightRearDrive;
    private SpeedControllerGroup rightDrive;
    private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    double rotateToAngleRate;

    static final double kP = 0.25;
	static final double kI = 0.00;
	static final double kD = 0.00;
	static final double kF = 0.00;
    static final double kToleranceDegrees = 2.0f;

    private NetworkTableInstance tableInst;
    private NetworkTable table;
    private NetworkTableEntry kP_Entry, kD_Entry, kI_Entry, kF_Entry, rotationSpeed_Entry;
    
    ShuffleboardTab dataTab = Shuffleboard.getTab("Subsystems");
    private NetworkTableEntry targetEntry;
    

    public DriveTrain() {

        // Practice Bot
        // leftFrontDrive = new WPI_TalonSRX(1);
        // rightFrontDrive = new WPI_TalonSRX(3);

        // differentialDrive = new DifferentialDrive(leftFrontDrive, rightFrontDrive);
        // addChild("DifferentialDrive", differentialDrive);
        // differentialDrive.setSafetyEnabled(false);
        // differentialDrive.setExpiration(0.1);
        // differentialDrive.setMaxOutput(1.0);

        // Final Bot ------------------------------------------------------------
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFrontDrive = new WPI_TalonSRX(1);
        leftRearDrive = new WPI_TalonSRX(2);
        
        leftDrive = new SpeedControllerGroup(leftFrontDrive, leftRearDrive  );
        addChild("LeftDrive",leftDrive);

        rightFrontDrive = new WPI_TalonSRX(3);
        rightRearDrive = new WPI_TalonSRX(4);
        
        rightDrive = new SpeedControllerGroup(rightFrontDrive, rightRearDrive  );
        addChild("RightDrive",rightDrive);
        
        differentialDrive = new DifferentialDrive(leftDrive, rightDrive);
        addChild("DifferentialDrive",differentialDrive);
        differentialDrive.setSafetyEnabled(false);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        

        ShuffleboardLayout pidValues = Shuffleboard.getTab("Subsystems")
            .getLayout("ahrs", BuiltInLayouts.kList)
            .withSize(2, 2)
            .withPosition(6, 1);

        tableInst = NetworkTableInstance.getDefault();
        table = tableInst.getTable("Shuffleboard");
        kP_Entry = table.getEntry("Subsystems/ahrs/PID/kP");
        kD_Entry = table.getEntry("Subsystems/ahrs/PID/kD");
        kI_Entry = table.getEntry("Subsystems/ahrs/PID/kI");
        kF_Entry = table.getEntry("Subsystems/ahrs/PID/kF");
        rotationSpeed_Entry = table.getEntry("Subsystems/ahrs/output/rotationSpeed");
    
        /* Uncomment these values if network tables doesn't have them (roboRio refresh or something) */
        pidValues.add("PID/kP", kP_Entry.getDouble(kP));
        pidValues.add("PID/kI", kI_Entry.getDouble(kI));
        pidValues.add("PID/kD", kD_Entry.getDouble(kI));
        pidValues.add("PID/kF", kF_Entry.getDouble(kI));
        pidValues.add("output/rotationSpeed", 0.0);

        turnController = new PIDController(kP_Entry.getDouble(kP), kI_Entry.getDouble(kI), kD_Entry.getDouble(kD), kF_Entry.getDouble(kF), Robot.positionSensor.getAHRS(), this);
		turnController.setInputRange(-180.0f, 180.0f);
		turnController.setOutputRange(-0.6, 0.6);
		turnController.setAbsoluteTolerance(kToleranceDegrees);
        turnController.setContinuous(true);
        
        targetEntry = dataTab.add("ahrs/output/target", 0.0).getEntry();

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new RKDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        
    }

    public void arcadeDrive(double speed, double rotation) {
    	differentialDrive.arcadeDrive(speed, rotation);
    }

    public void tankDrive(double leftSpeed, double rightSpeed) {
    	differentialDrive.tankDrive(leftSpeed, rightSpeed);
    }

    public void turnTo(double angle) {

        targetEntry.setDouble(angle);

        double currentRotationRate;
        
        turnController.setP(kP_Entry.getDouble(kP));
        turnController.setD(kD_Entry.getDouble(kD));
        turnController.setI(kI_Entry.getDouble(kI));
        turnController.setF(kF_Entry.getDouble(kF));

		turnController.setSetpoint(angle);
		turnController.enable();
        currentRotationRate = rotateToAngleRate;

        rotationSpeed_Entry.setDouble(currentRotationRate);
		differentialDrive.arcadeDrive(0, currentRotationRate);
    }
    
    /* This function is invoked periodically by the PID Controller, */
	/* based upon navX MXP yaw angle input and PID Coefficients. */
	public void pidWrite(double output) {

        // kF_Entry = table.getEntry("/Shuffleboard/Subsystems/PID/ahrs/kF");
		// SmartDashboard.putNumber("DriveTrain/ahrs/rotateRate", output);
		rotateToAngleRate = output;
	}


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


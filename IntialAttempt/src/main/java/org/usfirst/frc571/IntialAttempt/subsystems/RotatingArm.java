// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc571.IntialAttempt.subsystems;


import org.usfirst.frc571.IntialAttempt.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import edu.wpi.first.networktables.NetworkTableEntry;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class RotatingArm extends Subsystem {

    private ShuffleboardTab dataTab = Shuffleboard.getTab("Subsystems");
    private NetworkTableEntry armForwardLimitEntry, armReverseLimitEntry;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DigitalInput forwardLimit;
    private DigitalInput reverseLimit;
    private AnalogPotentiometer armPosition;
    private WPI_TalonSRX armTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public RotatingArm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        forwardLimit = new DigitalInput(1);
        addChild("ForwardLimit",forwardLimit);
        
        
        reverseLimit = new DigitalInput(0);
        addChild("ReverseLimit",reverseLimit);
        
        
        armPosition = new AnalogPotentiometer(0, 1.0, 0.0);
        addChild("ArmPosition",armPosition);
        
        
        armTalon = new WPI_TalonSRX(5);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armForwardLimitEntry = dataTab
            .add("RotatingArm/forwardLimit", forwardLimit.get())
            .getEntry();

        armReverseLimitEntry = dataTab
            .add("RotatingArm/reverseLimit", reverseLimit.get())
            .getEntry();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new RotateArm());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        armForwardLimitEntry.setBoolean(forwardLimit.get());
        armReverseLimitEntry.setBoolean(reverseLimit.get());
    }

    public void RotateArm(double speed) {
        if((speed > 0) &&  armForwardLimitEntry.getBoolean(false)) {
            armTalon.set(speed);
        }
        else if((speed < 0) && armReverseLimitEntry.getBoolean(false)) {
            armTalon.set(speed);
        }
        else {
            armTalon.set(0.0);
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

